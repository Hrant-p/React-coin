{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\A\\\\Desktop\\\\react-coin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\A\\\\Desktop\\\\react-coin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\A\\\\Desktop\\\\react-coin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\A\\\\Desktop\\\\react-coin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\A\\\\Desktop\\\\react-coin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\A\\\\Desktop\\\\react-coin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\A\\\\Desktop\\\\react-coin\\\\src\\\\components\\\\list\\\\List.js\";\nimport React from 'react';\nimport { API_URL } from '../../config';\nimport { handleResponse } from '../../helpers.js';\nimport Pagination from './Pagination';\nimport Loading from '../common/Loading';\nimport Table from './Table';\n\nvar List =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(List, _React$Component);\n\n  function List() {\n    var _this;\n\n    _classCallCheck(this, List);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(List).call(this));\n    _this.state = {\n      page: 1,\n      totalPages: 0,\n      // NOTE: Don't set it greater than 50, because maximum perPage for API is 50\n      perPage: 20,\n      currencies: [],\n      loading: false,\n      error: ''\n    };\n    _this.handlePaginationClick = _this.handlePaginationClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.fetchCurrencies();\n    }\n  }, {\n    key: \"fetchCurrencies\",\n    value: function fetchCurrencies() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          page = _this$state.page,\n          perPage = _this$state.perPage; // Set loading to true, while we are fetching data from server\n\n      this.setState({\n        loading: true\n      }); // Fetch crypto currency data from API with page and perPage parameters\n\n      fetch(\"\".concat(API_URL, \"/cryptocurrencies/?page=\").concat(page, \"&perPage=\").concat(perPage)).then(handleResponse).then(function (data) {\n        // Set received data in components state\n        // Clear error if any and set loading to false\n        var totalPages = data.totalPages,\n            currencies = data.currencies;\n\n        _this2.setState({\n          currencies: currencies,\n          totalPages: totalPages,\n          error: '',\n          loading: false\n        });\n      }).catch(function (error) {\n        // Show error message, if request fails and set loading to false\n        _this2.setState({\n          error: error.errorMessage,\n          loading: false\n        });\n      });\n    }\n  }, {\n    key: \"handlePaginationClick\",\n    value: function handlePaginationClick(direction) {\n      var _this3 = this;\n\n      var nextPage = this.state.page; // Increment nextPage if direction variable is next, otherwise decrement it\n\n      nextPage = direction === 'next' ? nextPage + 1 : nextPage - 1; // Call fetchCurrencies function inside setState's callback\n      // Because we have to make sure first page state is updated\n\n      this.setState({\n        page: nextPage\n      }, function () {\n        _this3.fetchCurrencies();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          currencies = _this$state2.currencies,\n          loading = _this$state2.loading,\n          error = _this$state2.error,\n          page = _this$state2.page,\n          totalPages = _this$state2.totalPages; // Render only loading component, if it's set to true\n\n      if (loading) {\n        return React.createElement(\"div\", {\n          className: \"loading-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, React.createElement(Loading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }));\n      } // Render only error message, if error occured while fetching data\n\n\n      if (error) {\n        return React.createElement(\"div\", {\n          className: \"error\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, error);\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(Table, {\n        currencies: currencies,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(Pagination, {\n        page: page,\n        totalPages: totalPages,\n        handlePaginationClick: this.handlePaginationClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return List;\n}(React.Component);\n\nexport default List;","map":{"version":3,"sources":["C:\\Users\\A\\Desktop\\react-coin\\src\\components\\list\\List.js"],"names":["React","API_URL","handleResponse","Pagination","Loading","Table","List","state","page","totalPages","perPage","currencies","loading","error","handlePaginationClick","bind","fetchCurrencies","setState","fetch","then","data","catch","errorMessage","direction","nextPage","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { API_URL } from '../../config';\r\nimport { handleResponse } from '../../helpers.js';\r\nimport Pagination from './Pagination';\r\nimport Loading from '../common/Loading';\r\nimport Table from './Table';\r\n\r\nclass List extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      page: 1,\r\n      totalPages: 0,\r\n      // NOTE: Don't set it greater than 50, because maximum perPage for API is 50\r\n      perPage: 20,\r\n      currencies: [],\r\n      loading: false,\r\n      error: '',\r\n    };\r\n\r\n    this.handlePaginationClick = this.handlePaginationClick.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.fetchCurrencies();\r\n  }\r\n\r\n  fetchCurrencies() {\r\n    const { page, perPage } = this.state;\r\n\r\n    // Set loading to true, while we are fetching data from server\r\n    this.setState({ loading: true });\r\n\r\n    // Fetch crypto currency data from API with page and perPage parameters\r\n    fetch(`${API_URL}/cryptocurrencies/?page=${page}&perPage=${perPage}`)\r\n      .then(handleResponse)\r\n      .then((data) => {\r\n        // Set received data in components state\r\n        // Clear error if any and set loading to false\r\n        const { totalPages, currencies } = data;\r\n\r\n        this.setState({\r\n          currencies,\r\n          totalPages,\r\n          error: '',\r\n          loading: false,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        // Show error message, if request fails and set loading to false\r\n        this.setState({\r\n          error: error.errorMessage,\r\n          loading: false,\r\n        });\r\n      });\r\n  }\r\n\r\n  handlePaginationClick(direction) {\r\n    let nextPage = this.state.page;\r\n\r\n    // Increment nextPage if direction variable is next, otherwise decrement it\r\n    nextPage = direction === 'next' ? nextPage + 1 : nextPage - 1;\r\n\r\n    // Call fetchCurrencies function inside setState's callback\r\n    // Because we have to make sure first page state is updated\r\n    this.setState({ page: nextPage }, () => {\r\n      this.fetchCurrencies();\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { currencies, loading, error, page, totalPages } = this.state;\r\n\r\n    // Render only loading component, if it's set to true\r\n    if (loading) {\r\n      return <div className=\"loading-container\"><Loading /></div>\r\n    }\r\n\r\n    // Render only error message, if error occured while fetching data\r\n    if (error) {\r\n      return <div className=\"error\">{error}</div>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Table currencies={currencies} />\r\n\r\n        <Pagination\r\n          page={page}\r\n          totalPages={totalPages}\r\n          handlePaginationClick={this.handlePaginationClick}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n"]},"metadata":{},"sourceType":"module"}